<?php

namespace WPMP\Helpers;

defined( 'ABSPATH' ) || exit;

/**
 * Get a dynamic link to an asset file generated by laravel-mix.
 *
 * @param string $path
 * @param string $manifestDirectory
 * @return string
 */
function mix( $path, $manifestDirectory = '', $hot = false ) {
	static $manifest;

	if ( $manifestDirectory && strpos( $manifestDirectory, '/' ) !== 0 ) {
		$manifestDirectory = "/{$manifestDirectory}";
	}

	if ( ! $manifest ) {
		if ( ! file_exists( $manifestPath = $manifestDirectory . '/mix-manifest.json' ) ) {
			throw new \Exception('The Mix manifest does not exist.');
		}
		$manifest = json_decode( file_get_contents( $manifestPath ), true );
	}

	if ( strpos( $path, '/' ) !== 0 ) {
		$path = "/{$path}";
	}

	if ( ! array_key_exists( $path, $manifest ) ) {
		throw new \Exception(
			"Unable to locate Mix file: {$path}. Please check your " .
				'webpack.mix.js output paths and try again.'
		);
	}

	return $hot ? "http://localhost:8080{$manifest[ $path ]}" : $manifest[ $path ];
}

/**
 * Get current URL
 *
 * @return string
 */
function get_current_url() {
	return ( isset( $_SERVER['HTTPS'] ) && $_SERVER['HTTPS'] === 'on' ? "https" : "http" ) . "://{$_SERVER['HTTP_HOST']}{$_SERVER['REQUEST_URI']}";
}

/**
 * Insert element after a specific key in array
 *
 * @param string $key
 * @param array $array
 * @param string $new_key
 * @param mixed $new_value
 * @return array
 */
function array_insert_before( $key, array &$array, $new_key, $new_value ) {
	if ( array_key_exists( $key, $array ) ) {
		$new = [];

		foreach ( $array as $k => $value ) {
			if ( $k === $key ) {
				$new[ $new_key ] = $new_value;
			}

			$new[ $k ] = $value;
		}

		return $new;
	}

	return $array;
}

/**
 * Insert element after a specific key in array
 *
 * @param string $key
 * @param array $array
 * @param string $new_key
 * @param mixed $new_value
 * @return array
 */
function array_insert_after( $key, array &$array, $new_key, $new_value ) {
	if ( array_key_exists( $key, $array ) ) {
		$new = [];

		foreach ( $array as $k => $value ) {
			$new[ $k ] = $value;

			if ( $k === $key ) {
				$new[ $new_key ] = $new_value;
			}
		}

		return $new;
	}

	return $array;
}

/**
 * Crypt/uncrypt a value.
 *
 * @param string $string
 * @param boolean $decrypt
 * @return string
 */
function crypt( $string, $decrypt = false ) {
	$salt1          = 'Nso1Il~x|%%QCA/W1LnGRD}I*Z`GH3#sIz!-s|r8|hUf=YFPOFDAa> p)Gj*YUw|';
	$salt2          = 'o!)>tG1JZ~?~sM35u+-k-(;y-loyYgmkno `A0%Z?Dm+DX|i@|W7s6r0~zoP-QuO';
	$encrypt_method = 'AES-256-CBC';
	$key            = hash( 'sha256', $salt1 );
	$iv             = substr( hash( 'sha256', $salt2 ), 0, 16 );

	return ( ! $decrypt ) ? base64_encode( openssl_encrypt( $string, $encrypt_method, $key, 0, $iv ) ) : openssl_decrypt( base64_decode( $string ), $encrypt_method, $key, 0, $iv );
}

/**
 * Is this plugin currently active for the entire network?
 *
 * @return boolean
 */
function is_active_on_multisite() {
	if ( ! function_exists( 'is_plugin_active_for_network' ) ) {
		require_once ABSPATH . '/wp-admin/includes/plugin.php';
	}

	return is_plugin_active_for_network( WPMP_BASENAME );
}

/**
 * Log a specific message
 *
 * @param mixed $message
 * @param string $type
 * @param mixed $extra_data
 * @return void
 */
function log( $data = null ) {
	$log_path = WPMP_DIR . 'debug.log';

	error_log( '█░█░█░█░█░█░█░█░█░█░█░█░█░█░█░█░█░█░█░█░█░█░█░█░█░█░█░█' . PHP_EOL, 3, $log_path );
	error_log( print_r( $data, true ) . PHP_EOL, 3, $log_path );
}

/**
 * Parse a URL.
 *
 * @see https://wordpress.stackexchange.com/a/301031
 * @param string $url
 * @param boolean $retdata
 * @return string
 */
function parse_url( $url, $retdata = true ){
	$url = substr($url,0,4)=='http' ? $url : 'http://'.$url; //assume http if not supplied

	if ($urldata = parse_url(str_replace('&amp;','&',$url))){
		$path_parts = pathinfo($urldata['host']);
		$tmp = explode('.',$urldata['host']); $n = count($tmp);
		if ($n>=2){
			if ($n==4 || ($n==3 && strlen($tmp[($n-2)])<=3)){
				$urldata['domain']    = $tmp[($n-3)].".".$tmp[($n-2)].".".$tmp[($n-1)];
				$urldata['tld']       = $tmp[($n-2)].".".$tmp[($n-1)];                                      //top-level domain
				$urldata['root']      = $tmp[($n-3)];                                                       //second-level domain
				$urldata['subdomain'] = $n == 4 ? $tmp[0] : (($n==3 && strlen($tmp[($n-2)])<=3)? $tmp[0]: '');
			} else {
				$urldata['domain'] = $tmp[($n-2)].".".$tmp[($n-1)];
				$urldata['tld'] = $tmp[($n-1)];
				$urldata['root'] = $tmp[($n-2)];
				$urldata['subdomain'] = $n==3? $tmp[0]: '';
			}
		}
		//$urldata['dirname'] = $path_parts['dirname'];
		$urldata['basename'] = $path_parts['basename'];
		$urldata['filename'] = $path_parts['filename'];
		$urldata['extension'] = $path_parts['extension'];
		$urldata['base'] = $urldata['scheme']."://".$urldata['host'];
		$urldata['abs'] = (isset($urldata['path']) && strlen($urldata['path']))? $urldata['path']: '/';
		$urldata['abs'] .= (isset($urldata['query']) && strlen($urldata['query']))? '?'.$urldata['query']: '';
		//Set data
		if ($retdata){
			return $urldata;
		} else {
			$this->urldata = $urldata;
			return true;
		}
	} else {
		//invalid URL
		return false;
	}
}